from math import sqrt
import random

# Задание 2
"""Високосный год (введите дату для проверки)"""


def is_year_leap(year):
    if year % 4 == 0 and (year % 100 != 0 or year < 1582) or year % 400 == 0:
        return True
    else:
        return False


year_from_user = int(input("Введите год: "))
print(is_year_leap(year_from_user))

# Задание 3
"""
Написать функцию square, принимающую 1 аргумент - сторону квадрата, и возвращающую 3 значения ( с помощью кортежа)
- периметр квадрата
- площадь квадрата
- диагональ квадрата
Сторону квадрата вводить с клавиатуры
"""


# Объявляем функцию и указываем имя функции (square) и передаем параметр (side)
def square(side: float):
    # Будем использовать функцию round и передаем параметр 2 для округления до 2-х знаков после запятой
    perimeter_of_the_square = round(4 * side, 2)  # Объявляем переменную и присваиваем значение периметра квадр.
    area_of_the_square = round(side * side, 2)  # Объявляем переменную и присваиваем значение площади квадрата
    diagonal_of_the_square = round(side * sqrt(2), 2)  # Объявляем переменную и присваиваем значение диагонали квадрата
    # функция square возвращает периметр, площадь и диагональ квадрата
    return perimeter_of_the_square, area_of_the_square, diagonal_of_the_square


side_of_a_square = float(input("Введите длину стороны квадрата: "))  # Запрос на ввод у пользователя
print(square(side_of_a_square))  # Вызываем функцию square с переданным аргументом side_of_a_square и выводим на экран

# Задание 4
"""
Написать функцию season, принимающую 1 аргумент - номер месяца (от 1 до 12), и возвращающую время года,
которому этот месяц принадлежит (зима, весна, лето, осень).
Номер месяца вводить с клавиатуры
"""


# Объявляем функцию и указываем имя функции (season) и передаем параметр (number_of_month)
def season(number_of_month: int):
    # Используем Оператор if-elif-else для проверки условий
    if 0 < number_of_month <= 2 or number_of_month == 12:
        # Если введено число в диапазоне от 1 до 2 и число 12,
        # то завершаем выполнение текущей функции и возвращаем значение "зима"
        return "зима"
    elif 3 <= number_of_month <= 5:
        # Если введено число в диапазоне от 3 до 5,
        # то завершаем выполнение текущей функции и возвращаем значение "весна"
        return "весна"
    elif 6 <= number_of_month <= 8:
        # Если введено число в диапазоне от 6 до 8,
        # то завершаем выполнение текущей функции и возвращаем значение "лето"
        return "лето"
    elif 9 <= number_of_month <= 11:
        # Если введено число в диапазоне от 9 до 11,
        # то завершаем выполнение текущей функции и возвращаем значение "осень"
        return "осень"
    else:
        # Если введено число не в диапазоне от 1 до 12,
        # то завершаем выполнение текущей функции и возвращаем значение "Нет такого номера месяца!"
        return "Нет такого номера месяца!"


number = int(input("Введите номер месяца (1 -12): "))  # Запрос на ввод у пользователя
print(season(number))  # Вызываем функцию season с переданным аргументом number и выводим на экран

# Задание 5
"""
Написать функцию is_prime, принимающую 1 аргумент - число 0 до 1000, и возвращающую True, если оно простое,
и False если иначе
"""


# Объявляем функцию и указываем имя функции (is_prime) и передаем параметр (prime_number)
def is_prime(prime_number: int):
    # Используем условный оператор if для проверки условий
    if 0 <= prime_number <= 1000:  # задаем интервал из задания от 0 до 1000
        # Если введенное пользователем число 0 или 1, то возвращаем False (0 и 1 не являются простыми числами)
        if 0 <= prime_number <= 1:
            return False
        else:
            # Если пользователь ввел число от 2 до 1000, то выполняется блок else
            d = 2  # объявляем переменную d - наименьший делитель
            # Используем цикл while для нахождения возможного делителя для нашего числа
            # Если делитель найден, то цикл останавливается и возвращается
            # True если выполняется условие (d == prime_number) или False если выполняется условие (d != prime_number)
            while prime_number % d != 0:
                d += 1
            return d == prime_number
    else:
        # Возвращается "Вы ввели число не входящий в диапазон" если введено число не входящее в заданный диапазон чисел
        return "Вы ввели число не входящий в диапазон"


num = int(input("Введите число (0 - 1000): "))  # Запрос на ввод у пользователя
print(is_prime(num))  # Вызываем функцию is_prime с переданным аргументом num и выводим на экран

# Задание 6
"""
Функция, вычисляющая среднее арифметическое элементов массива. 
Массив должен состоять из случайных чисел, длинной 10 элементов
"""


# Объявляем функцию и указываем имя функции (average) и передаем параметр (list_)
def average(list_):
    sum_number = sum(list_)  # Объявляем переменную и передаем в нее сумму всех элементов списка
    average_number = sum_number / len(list_)  # Частое от деления общей суммы всех элементов списка на кол-во элементов
    print(average_number)  # Выводим на экран средне арифметическое


list_10_random_numbers = []  # Создание пустого списка
random_number = None  # Переменная для случайных чисел
i = 1  # Переменная для элементов списка
while i <= 10:  # Итераций будет 10
    random_number = random.randint(1, 100)  # Случайное число в диапазоне (1-100) добавляем в список.
    list_10_random_numbers.append(random_number)
    i += 1
print(list_10_random_numbers)
# Вызываем функцию average с переданным аргументом list_10_random_numbers и выводим на экран
average(list_10_random_numbers)


# Домашнее задание - Калькулятор
# Объявляем функцию и указываем имя функции (give_sum) и передаем параметр (num1 и num2) - для нахождения суммы
def give_sum(num1: float, num2: float):
    return num1 + num2  # возвращаем сумму


# Объявляем функцию и указываем имя функции (give_minus) и передаем параметр (num1 и num2) - для нахождения разности
def give_minus(num1: float, num2: float):
    return num1 - num2  # возвращаем разность


# Объявляем функцию и указываем имя функции (give_multi) и передаем параметр (num1 и num2) - для нахождения произведения
def give_multi(num1: float, num2: float):
    return num1 * num2  # возвращаем произведение


# Объявляем функцию и указываем имя функции (give_div) и передаем параметр (num1 и num2) - для нахождения частного
def give_div(num1: float, num2: float):
    if number_2 != 0:  # Если остаток от деления второго числа на 2 не равно 0, то возвращаем частное
        return num1 / num2
    else:
        # Если остаток от деления второго числа на 2 равен 0, то возвращаем "Деление на ноль"
        return "Деление на ноль"


# Запрос на ввод у пользователя 2 чисел
number_1 = float(input("Введите первое число (используйте точку для дробных чисел): "))
number_2 = float(input("Введите второе число (используйте точку для дробных чисел): "))

while True:
    # Запрос на ввод у пользователя необходимую математическую операцию или 0 для выхода
    math_or_exit_operation = input("Введите необходимую операцию:\n+ ; - ; * ; / ; 0 (exit): ")
    # Если введена операция "0", то цикл while останавливается
    if math_or_exit_operation == "0":
        break
    # Если введена операция "+", то вызываем функцию give_sum и передаем аргументы number_1 и number_2
    elif math_or_exit_operation == "+":
        print(give_sum(number_1, number_2))
    # Если введена операция "-", то вызываем функцию give_minus и передаем аргументы number_1 и number_2
    elif math_or_exit_operation == "-":
        print(give_minus(number_1, number_2))
    # Если введена операция "*", то вызываем функцию give_multi и передаем аргументы number_1 и number_2
    elif math_or_exit_operation == "*":
        print(give_multi(number_1, number_2))
    # Если введена операция "/", то вызываем функцию give_div и передаем аргументы number_1 и number_2
    elif math_or_exit_operation == "/":
        print(give_div(number_1, number_2))
